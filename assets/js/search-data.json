{
  
    
        "post0": {
            "title": "My Python Quiz",
            "content": "Below, I used python to make a quiz. I first defined a function that prints the argument(question) given. I added some pre quiz questions to collect the name and if they are ready to take the quiz. After that, I used a for loop and enumerate function to use the corresponding questions and answers in my question function. Lastly, I used some math operations to calculate the percentage that the person scored on the quiz. . def gen(qna): print(qna) msg = input() return msg corrqs = 0 #used to determine score #pre quiz questions: name, &quot;are you ready?&quot; print(&quot;what is your name?&quot;) name = input() print(name + &quot;, are you ready to take a quiz?&quot;) ans = input() if ans == &quot;yes&quot;: print(&quot;ok, good luck!&quot;) else: print(&quot;ok, bye!&quot;) quit() #lists including questions and answers questions = [&quot;What command is used to include other functions that were previously developed?&quot;, &quot;What command is used to evaluate correct or incorrect response in this example?&quot;, &quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;] answers = [&quot;import&quot;, &quot;if&quot;, &quot;expression&quot;] #for loop, looping the questions function with questions and answers from lists for i, question in enumerate(questions): answer = answers[i] resp = gen(question) if resp == (answer): print(&quot;your answer, &quot; + str(resp) + &quot;, is correct!&quot;) corrqs += 1 else: print(&quot;your answer, &quot; + str(resp) + &quot;, is incorrect!&quot;) numqs = len(questions) #also used to determine score score = (corrqs/numqs) #correct questions/total questions ratio(decimal) per = (score * 100) # multiply by 100 for percentage print(&quot;good job &quot; + name + &quot;, you scored &quot; + str(per) + &quot; percent on this quiz!&quot;) #final message with score . what is your name? jaden, are you ready to take a quiz? ok, good luck! What command is used to include other functions that were previously developed? your answer, import, is correct! What command is used to evaluate correct or incorrect response in this example? your answer, if, is correct! Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? your answer, expression, is correct! good job jaden, you scored 100.0 percent on this quiz! .",
            "url": "https://raisinbran25.github.io/csp2/2022/08/28/quiz.html",
            "relUrl": "/2022/08/28/quiz.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "My first jupyter notebook",
            "content": "In this python script, I used a for loop to list all 101 Dalmatians. . var = &quot;Dalmatian &quot; for n in range(1, 102): print(var + str(n)) . Dalmatian 1 Dalmatian 2 Dalmatian 3 Dalmatian 4 Dalmatian 5 Dalmatian 6 Dalmatian 7 Dalmatian 8 Dalmatian 9 Dalmatian 10 Dalmatian 11 Dalmatian 12 Dalmatian 13 Dalmatian 14 Dalmatian 15 Dalmatian 16 Dalmatian 17 Dalmatian 18 Dalmatian 19 Dalmatian 20 Dalmatian 21 Dalmatian 22 Dalmatian 23 Dalmatian 24 Dalmatian 25 Dalmatian 26 Dalmatian 27 Dalmatian 28 Dalmatian 29 Dalmatian 30 Dalmatian 31 Dalmatian 32 Dalmatian 33 Dalmatian 34 Dalmatian 35 Dalmatian 36 Dalmatian 37 Dalmatian 38 Dalmatian 39 Dalmatian 40 Dalmatian 41 Dalmatian 42 Dalmatian 43 Dalmatian 44 Dalmatian 45 Dalmatian 46 Dalmatian 47 Dalmatian 48 Dalmatian 49 Dalmatian 50 Dalmatian 51 Dalmatian 52 Dalmatian 53 Dalmatian 54 Dalmatian 55 Dalmatian 56 Dalmatian 57 Dalmatian 58 Dalmatian 59 Dalmatian 60 Dalmatian 61 Dalmatian 62 Dalmatian 63 Dalmatian 64 Dalmatian 65 Dalmatian 66 Dalmatian 67 Dalmatian 68 Dalmatian 69 Dalmatian 70 Dalmatian 71 Dalmatian 72 Dalmatian 73 Dalmatian 74 Dalmatian 75 Dalmatian 76 Dalmatian 77 Dalmatian 78 Dalmatian 79 Dalmatian 80 Dalmatian 81 Dalmatian 82 Dalmatian 83 Dalmatian 84 Dalmatian 85 Dalmatian 86 Dalmatian 87 Dalmatian 88 Dalmatian 89 Dalmatian 90 Dalmatian 91 Dalmatian 92 Dalmatian 93 Dalmatian 94 Dalmatian 95 Dalmatian 96 Dalmatian 97 Dalmatian 98 Dalmatian 99 Dalmatian 100 Dalmatian 101 .",
            "url": "https://raisinbran25.github.io/csp2/2022/08/21/jupyter-notebook.html",
            "relUrl": "/2022/08/21/jupyter-notebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "My first post",
            "content": "Hello! This is my first post on this website. Here is my github if you want to check out the code. . .",
            "url": "https://raisinbran25.github.io/csp2/2022/08/21/first-post.html",
            "relUrl": "/2022/08/21/first-post.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://raisinbran25.github.io/csp2/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://raisinbran25.github.io/csp2/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Calendar",
          "content": "Here is the calendar for my website! . August: . 8/21: First Jupyter Notebook 8/21: First Post 8/28: Python Quiz .",
          "url": "https://raisinbran25.github.io/csp2/calendar/",
          "relUrl": "/calendar/",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hi! My name is Jaden Nguyen. I like to learn about computers. .",
          "url": "https://raisinbran25.github.io/csp2/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  

  

  
  

  
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://raisinbran25.github.io/csp2/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}